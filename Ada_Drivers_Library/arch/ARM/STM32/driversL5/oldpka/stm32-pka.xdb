with System;
with System.Machine_Code; use System.Machine_Code;

with STM32_SVD.RCC;  use STM32_SVD.RCC;

package body STM32.PKA is

   procedure Copy_S_To_U32 (S : String; To : out UInt32_Array)
   is
      X : UInt32;
      Y : UInt8_Array (0 .. 3);
      for X'Address use Y'Address;
      type ModBy4 is mod 4;
      Idx : ModBy4 := 0;
      Limit : Integer := (S'Length / 2);
      T : UInt8_Array (0 .. Limit - 1);
      Tidx : Integer := 0;
      Off : Integer := 0;
      type ModBy2 is mod 2;
      Idx2 : ModBy2 := 0;
      Z : UInt8;
   begin
      Z := 0;
      for I in S'Range loop
         Z := (Z * 16);
         if (Character'Pos (S (I)) >= Character'Pos ('a')) then
            Z := Z + (10 + (Character'Pos (S (I)) - Character'Pos ('a')));
         elsif (Character'Pos (S (I)) >= Character'Pos ('A')) then
            Z := Z + (10 + (Character'Pos (S (I)) - Character'Pos ('A')));
         else
            Z := Z + (Character'Pos (S (I)) - Character'Pos ('0'));
         end if;
         Idx2 := Idx2 + 1;
         if 0 = Idx2 then
            T (Tidx) := Z;
            Tidx := Tidx + 1;
            Z := 0;
         end if;
      end loop;

      --  ((Integer (N_By_8) - I) + Extra
      for I in reverse T'Range loop
         Y (Integer (Idx)) := T (I);
         Idx := Idx + 1;
         if Idx = 0 then
            To (Off) := X;
            X := 0;
            Off := Off + 1;
         end if;
      end loop;
      if Idx /= 0 then  -- Remainder
         To (Off) := X;
      end if;
   end Copy_S_To_U32;
   procedure Copy_U8_To_U32 (From : UInt8_Array; To : out UInt32_Array)
   is
      N : Integer;
      X : UInt32;
      Y : UInt8_Array (0 .. 3);
      for X'Address use Y'Address;
      type ModBy4 is mod 4;
      Idx : ModBy4 := 0;
   begin
      N := From'Size / 8;
      for I in From'Range loop
         Y (Integer (3 - Idx)) := From (I);
         Idx := Idx + 1;
         if Idx = 0 then
            To ((N - I) / 4) := X;
         end if;
      end loop;
   end Copy_U8_To_U32;

   procedure Copy_U32_To_U8 (From : UInt32_Array; To : out UInt8_Array)
   is
      N : Integer;
      X : UInt32;
      Y : UInt8_Array (0 .. 3);
      for X'Address use Y'Address;
      type ModBy4 is mod 4;
      Idx : ModBy4 := 0;
   begin
      N := (To'Size / 8) - 1;
      X := From (0);
      for I in To'Range loop
         To (N - I) := Y (Integer (Idx));
         Idx := Idx + 1;
         if Idx = 0 then
            X := From ((I + 1) / 4);
         end if;
      end loop;
   end Copy_U32_To_U8;

   procedure Copy_U8_To_S (From : UInt8; To : out ECDSA_String; Offset : UInt32)
   is
      Ch   : Character;
      Nib  : UInt4;
   begin
      for I in 1 .. 2 loop
         if I = 1 then
            Nib := UInt4 (Shift_Right (From, 4));
         else
            Nib := UInt4 (From and 16#0f#);
         end if;
         if Nib >= 10 then
            Ch := Character'Val (Integer ((Nib - 10)) + Character'Pos ('A'));
         else
            Ch := Character'Val (Integer (Nib) + Character'Pos ('0'));
         end if;
         To (I + Integer ((Offset * 2))) := Ch;
      end loop;
   end Copy_U8_To_S;

   procedure Copy_U32_To_S (From : UInt32_Array; To : out ECDSA_String)
   is
      N : UInt32;
      X : UInt32;
      Y : UInt8_Array (0 .. 3);
      for X'Address use Y'Address;
      Idx : UInt32 := 0;
      To_Copy : UInt32 := N_By_8;
   begin
      --      X := From (0);
      N := Num_Bits / 32;
      if (Num_Bits mod 32) > 0 then
         N := N + 1;
      end if;
      for I in 0 .. N - 1 loop
         X := From (Integer (I));
         for J in 0 .. 3 loop
            To_Copy := To_Copy - 1;
            Copy_U8_To_S (Y (J), To, To_Copy);
            if To_Copy = 0 then
               return;
            end if;
         end loop;
         Idx := Idx + 4;
      end loop;
   end Copy_U32_To_S;

   procedure Enable_Pka
   is
      RCC : aliased RCC_Peripheral
        with Import, Address => S_NS_Periph (RCC_Base);
   begin
      RCC.AHB2ENR.PKAEN := True;
      loop
         PKA.CR.EN := True;
         exit when PKA.CR.EN;
      end loop;
   end Enable_Pka;

   procedure Disable_Pka
   is
      RCC : aliased RCC_Peripheral
        with Import, Address => S_NS_Periph (RCC_Base);
   begin
      loop
         PKA.CR.EN := False;
         exit when not PKA.CR.EN;
      end loop;
   end Disable_Pka;

   function Check_Errors return Boolean
   is
   begin
      return PKA.SR.RAMERRF or PKA.SR.ADDRERRF;
   end Check_Errors;

   procedure Clear_Flags
   is
   begin
      PKA.CLRFR.PROCENDFC := True;
      PKA.CLRFR.RAMERRFC  := True;
      PKA.CLRFR.ADDRERRFC := True;
   end Clear_Flags;

   procedure Clear_Ram
   is
      PKA_RAM : aliased All_PKA_Ram with Import, Volatile, Address => S_NS_Periph (PKA_Base);
   begin
      PKA_RAM.RAM := (0 => 0, others => 0);
   end Clear_Ram;

   procedure Common_Init (For_Signing : Boolean)
   is
      P : String (1 .. Integer (N_By_8 * 2));
      X : String (1 .. Integer (N_By_8 * 2));
      Y : String (1 .. Integer (N_By_8 * 2));
      A : String (1 .. Integer (N_By_8 * 2));
      N : String (1 .. Integer (N_By_8 * 2));
      Neg : Boolean := True;
   begin
      if Curve_Name = "secp521r1" then
         P := "01FF" &
              "FFFFFFFF" & "FFFFFFFF" & "FFFFFFFF" & "FFFFFFFF" &
              "FFFFFFFF" & "FFFFFFFF" & "FFFFFFFF" & "FFFFFFFF" &
              "FFFFFFFF" & "FFFFFFFF" & "FFFFFFFF" & "FFFFFFFF" &
              "FFFFFFFF" & "FFFFFFFF" & "FFFFFFFF" & "FFFFFFFF";
         A := "01FF" &
              "FFFFFFFF" & "FFFFFFFF" & "FFFFFFFF" & "FFFFFFFF" &
              "FFFFFFFF" & "FFFFFFFF" & "FFFFFFFF" & "FFFFFFFF" &
              "FFFFFFFF" & "FFFFFFFF" & "FFFFFFFF" & "FFFFFFFF" &
              "FFFFFFFF" & "FFFFFFFF" & "FFFFFFFF" & "FFFFFFFC";
         X := "00C6" &
              "858E06B7" & "0404E9CD" & "9E3ECB66" & "2395B442" &
              "9C648139" & "053FB521" & "F828AF60" & "6B4D3DBA" &
              "A14B5E77" & "EFE75928" & "FE1DC127" & "A2FFA8DE" &
              "3348B3C1" & "856A429B" & "F97E7E31" & "C2E5BD66";
         Y := "0118" &
              "39296A78" & "9A3BC004" & "5C8A5FB4" & "2C7D1BD9" &
              "98F54449" & "579B4468" & "17AFBD17" & "273E662C" &
              "97EE7299" & "5EF42640" & "C550B901" & "3FAD0761" &
              "353C7086" & "A272C240" & "88BE9476" & "9FD16650";
         N := "01FF" &
              "FFFFFFFF" & "FFFFFFFF" & "FFFFFFFF" & "FFFFFFFF" &
              "FFFFFFFF" & "FFFFFFFF" & "FFFFFFFF" & "FFFFFFFA" &
              "51868783" & "BF2F966B" & "7FCC0148" & "F709A5D0" &
              "3BB5C9B8" & "899C47AE" & "BB6FB71E" & "91386409";
      elsif Curve_Name = "secp384r1" then
         P := "FFFFFFFF" & "FFFFFFFF" & "FFFFFFFF" & "FFFFFFFF" &
              "FFFFFFFF" & "FFFFFFFF" & "FFFFFFFF" & "FFFFFFFE" &
              "FFFFFFFF" & "00000000" & "00000000" & "FFFFFFFF";
         X := "AA87CA22" & "BE8B0537" & "8EB1C71E" & "F320AD74" &
              "6E1D3B62" & "8BA79B98" & "59F741E0" & "82542A38" &
              "5502F25D" & "BF55296C" & "3A545E38" & "72760AB7";
         Y := "3617DE4A" & "96262C6F" & "5D9E98BF" & "9292DC29" &
              "F8F41DBD" & "289A147C" & "E9DA3113" & "B5F0B8C0" &
              "0A60B1CE" & "1D7E819D" & "7A431D7C" & "90EA0E5F";
         A := "FFFFFFFF" & "FFFFFFFF" & "FFFFFFFF" & "FFFFFFFF" &
              "FFFFFFFF" & "FFFFFFFF" & "FFFFFFFF" & "FFFFFFFE" &
              "FFFFFFFF" & "00000000" & "00000000" & "FFFFFFFC";
         N := "FFFFFFFF" & "FFFFFFFF" & "FFFFFFFF" & "FFFFFFFF" &
              "FFFFFFFF" & "FFFFFFFF" & "C7634D81" & "F4372DDF" &
              "581A0DB2" & "48B0A77A" & "ECEC196A" & "CCC52973";
      elsif Curve_Name = "secp256r1" then
         P := "FFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFF";
         X := "6B17D1F2E12C4247F8BCE6E563A440F277037D812DEB33A0F4A13945D898C296";
         Y := "4FE342E2FE1A7F9B8EE7EB4A7C0F9E162BCE33576B315ECECBB6406837BF51F5";
         A := "FFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFC";
         N := "FFFFFFFF00000000FFFFFFFFFFFFFFFFBCE6FAADA7179E84F3B9CAC2FC632551";
      elsif Curve_Name = "secp256k1" then
         P := "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFC2F";
         X := "79BE667EF9DCBBAC55A06295CE870B07029BFCDB2DCE28D959F2815B16F81798";
         Y := "483ADA7726A3C4655DA4FBFC0E1108A8FD17B448A68554199C47D08FFB10D4B8";
         A := "0000000000000000000000000000000000000000000000000000000000000000";
         N := "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141";
         Neg := False;
      elsif Curve_Name = "secp128r1" then
         P := "FFFFFFFDFFFFFFFFFFFFFFFFFFFFFFFF";
         X := "161FF7528B899B2D0C28607CA52C5B86";
         Y := "CF5AC8395BAFEB13C02DA292DDED7A83";
         A := "FFFFFFFDFFFFFFFFFFFFFFFFFFFFFFFC";
         N := "FFFFFFFE0000000075A30D1B9038A115";
      elsif Curve_Name = "secp112r1" then
         P := "DB7C2ABF62E35E668076BEAD208B";
         X := "09487239995A5EE76B55F9C2F098";
         Y := "A89CE5AF8724C0A23E0E0FF77500";
         A := "DB7C2ABF62E35E668076BEAD2088";
         N := "DB7C2ABF62E35E7628DFAC6561C5";
      elsif Curve_Name = "secp112r2" then --  Not working (sig good, valid wrong)
         P := "DB7C2ABF62E35E668076BEAD208B";
         X := "4BA30AB5E892B4E1649DD0928643";
         Y := "ADCD46F5882E3747DEF36E956E97";
         A := "6127C24C05F38A0AAAF65C0EF02C";
         N := "36DF0AAFD8B8D7597CA10520D04B";
         Neg := False;
      elsif Curve_Name = "nistp521" then
         P := "01ff" &
              "ffffffff" & "ffffffff" & "ffffffff" & "ffffffff" &
              "ffffffff" & "ffffffff" & "ffffffff" & "ffffffff" &
              "ffffffff" & "ffffffff" & "ffffffff" & "ffffffff" &
              "ffffffff" & "ffffffff" & "ffffffff" & "ffffffff";
         X := "00c6" &
              "858e06b7" & "0404e9cd" & "9e3ecb66" & "2395b442" &
              "9c648139" & "053fb521" & "f828af60" & "6b4d3dba" &
              "a14b5e77" & "efe75928" & "fe1dc127" & "a2ffa8de" &
              "3348b3c1" & "856a429b" & "f97e7e31" & "c2e5bd66";
         Y := "0118" &
              "39296a78" & "9a3bc004" & "5c8a5fb4" & "2c7d1bd9" &
              "98f54449" & "579b4468" & "17afbd17" & "273e662c" &
              "97ee7299" & "5ef42640" & "c550b901" & "3fad0761" &
              "353c7086" & "a272c240" & "88be9476" & "9fd16650";
         A := "01ff" &
              "ffffffff" & "ffffffff" & "ffffffff" & "ffffffff" &
              "ffffffff" & "ffffffff" & "ffffffff" & "ffffffff" &
              "ffffffff" & "ffffffff" & "ffffffff" & "ffffffff" &
              "ffffffff" & "ffffffff" & "ffffffff" & "fffffffc";
         N := "01ff" &
              "ffffffff" & "ffffffff" & "ffffffff" & "ffffffff" &
              "ffffffff" & "ffffffff" & "ffffffff" & "fffffffa" &
              "51868783" & "bf2f966b" & "7fcc0148" & "f709a5d0" &
              "3bb5c9b8" & "899c47ae" & "bb6fb71e" & "91386409";
      elsif Curve_Name = "nistp384" then
         P := "ffffffff" & "ffffffff" & "ffffffff" & "ffffffff" &
              "ffffffff" & "ffffffff" & "ffffffff" & "fffffffe" &
              "ffffffff" & "00000000" & "00000000" & "ffffffff";
         X := "aa87ca22" & "be8b0537" & "8eb1c71e" & "f320ad74" &
              "6e1d3b62" & "8ba79b98" & "59f741e0" & "82542a38" &
              "5502f25d" & "bf55296c" & "3a545e38" & "72760ab7";
         Y := "3617de4a" & "96262c6f" & "5d9e98bf" & "9292dc29" &
              "f8f41dbd" & "289a147c" & "e9da3113" & "b5f0b8c0" &
              "0a60b1ce" & "1d7e819d" & "7a431d7c" & "90ea0e5f";
         A := "ffffffff" & "ffffffff" & "ffffffff" & "ffffffff" &
              "ffffffff" & "ffffffff" & "ffffffff" & "fffffffe" &
              "ffffffff" & "00000000" & "00000000" & "fffffffc";
         N := "ffffffff" & "ffffffff" & "ffffffff" & "ffffffff" &
              "ffffffff" & "ffffffff" & "c7634d81" & "f4372ddf" &
              "581a0db2" & "48b0a77a" & "ecec196a" & "ccc52973";
      elsif Curve_Name = "nistp256" then
         P := "ffffffff00000001000000000000000000000000ffffffffffffffffffffffff";
         X := "6b17d1f2e12c4247f8bce6e563a440f277037d812deb33a0f4a13945d898c296";
         Y := "4fe342e2fe1a7f9b8ee7eb4a7c0f9e162bce33576b315ececbb6406837bf51f5";
         A := "ffffffff00000001000000000000000000000000fffffffffffffffffffffffc";
         N := "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632551";
      elsif Curve_Name = "nistp224" then
         P := "ffffffffffffffffffffffffffffffff000000000000000000000001";
         X := "b70e0cbd6bb4bf7f321390b94a03c1d356c21122343280d6115c1d21";
         Y := "bd376388b5f723fb4c22dfe6cd4375a05a07476444d5819985007e34";
         A := "fffffffffffffffffffffffffffffffefffffffffffffffffffffffe";
         N := "ffffffffffffffffffffffffffff16a2e0b8f03e13dd29455c5c2a3d";
      elsif Curve_Name = "nistp192" then
         P := "fffffffffffffffffffffffffffffffeffffffffffffffff";
         X := "188da80eb03090f67cbf20eb43a18800f4ff0afd82ff1012";
         Y := "07192b95ffc8da78631011ed6b24cdd573f977a11e794811";
         A := "fffffffffffffffffffffffffffffffefffffffffffffffc";
         N := "ffffffffffffffffffffffff99def836146bc9b1b4d22831";
      else
         raise Program_Error with "Curve not supported";
      end if;
      if For_Signing then
         declare
            ECDSA : aliased ECDSA_Sign_Ram with Import, Address => S_NS_Periph (PKA_Base);
         begin
            Copy_S_To_U32 (P, ECDSA.Mod_GF);
            Copy_S_To_U32 (X, ECDSA.X);
            Copy_S_To_U32 (Y, ECDSA.Y);
            Copy_S_To_U32 (A, ECDSA.A_Coeff);
            Copy_S_To_U32 (N, ECDSA.Order_N);
         end;
      else
         declare
            ECDSA : aliased ECDSA_Verify_Ram with Import, Address => S_NS_Periph (PKA_Base);
         begin
            Copy_S_To_U32 (P, ECDSA.Mod_GF);
            Copy_S_To_U32 (X, ECDSA.IP_X);
            Copy_S_To_U32 (Y, ECDSA.IP_Y);
            Copy_S_To_U32 (N, ECDSA.Order_N);
            if Neg then
               ECDSA.A_Coeff_Sign   := 1;
               ECDSA.A_Coeff        := 3;
            end if;
         end;
      end if;
   end Common_Init;
   function Normalize (Digest : ECDSA_Hash) return Digest_Buffer
   is
      Gap : UInt32 := (Num_Bits - Hash_Size) / 8;
      Norm_Digest : Digest_Buffer;
   begin
      if Num_Bits > Hash_Size then
         Norm_Digest := (0 => 0, others => 0);
         for I in Digest'Range loop
            Norm_Digest (I + Integer (Gap)) := Digest (I);
         end loop;
      else
         for I in Norm_Digest'Range loop
            Norm_Digest (I) := Digest (I);
         end loop;
      end if;
      return Norm_Digest;
   end Normalize;
   function Normalize (Digest : ECDSA_HashStr) return Digest_BufferStr
   is
      Gap : UInt32 := (Num_Bits - Hash_Size) / 8;
      Norm_Digest : Digest_BufferStr;
      Extra : Natural := 0;
   begin
      if (Num_Bits mod 8) /= 0 then
         Extra := 2;
      end if;
      if Num_Bits > Hash_Size then
         Norm_Digest := (1 => '0', others => '0');
         for I in Digest'Range loop
            Norm_Digest (I + Integer (Gap * 2) + Extra) := Digest (I);
         end loop;
      else
         for I in Norm_Digest'Range loop
            Norm_Digest (I + Extra) := Digest (I);
         end loop;
      end if;
      return Norm_Digest;
   end Normalize;

   function ECDSA_Sign (Private_Key : ECDSA_Key;
                        H           : ECDSA_Hash;
                        K           : ECDSA_Rand;
                        Signature   : out ECDSA_Signature) return Boolean
   is
      ECDSA : aliased ECDSA_Sign_Ram with Import, Address => S_NS_Periph (PKA_Base);
      Result : Boolean := True;
      Err : UInt32;
      Gap : UInt32 := (Num_Bits - Hash_Size) / 8;
   begin
      Disable_Pka;
      Clear_Ram;
      Common_Init (For_Signing => True);
      Copy_U8_To_U32 (K, ECDSA.K);
      Copy_U8_To_U32 (UInt8_Array (Normalize (H)), ECDSA.Hash);
      Copy_U8_To_U32 (UInt8_Array (Private_Key), ECDSA.PrivateKey);

      ECDSA.Order_Num_Bits := Num_Bits;
      ECDSA.Mod_Num_Bits   := Num_Bits;
--      ECDSA.A_Coeff_Sign   := 1;
--      ECDSA.A_Coeff        := 3;

      Clear_Flags;
      Enable_Pka;

      PKA.CR.MODE := ECDSA_Sign'Enum_Rep;

      PKA.CR.START := True;
      --  Need to add timeout here
      loop
         exit when PKA.SR.PROCENDF;
      end loop;

      --  sequential here vvv
      if Check_Errors then
         Result := False;
      end if;
      Clear_Flags;

      Copy_U32_To_U8 (ECDSA.R, Signature.R);
      Copy_U32_To_U8 (ECDSA.S, Signature.S);

      --  vvvvv if you don't disable here...
      --  The the Error read below can get bad data
      Disable_Pka;
      --   or vvvvv he will flip a flag indicating ram error(!)
      Err := ECDSA.Error;
      if Err /= 0 then
         Result := False;
      end if;
      return Result;
   end ECDSA_Sign;

   function ECDSA_Sign (Private_Key : ECDSA_KeyStr;
                        H           : ECDSA_HashStr;
                        K           : ECDSA_RandStr;
                        Signature   : out ECDSA_SignatureStr) return Boolean
   is
      ECDSA : aliased ECDSA_Sign_Ram with Import, Address => S_NS_Periph (PKA_Base);
      Result : Boolean := True;
      Err : UInt32;
   begin
      Disable_Pka;
      Clear_Ram;
      Common_Init (For_Signing => True);
      Copy_S_To_U32 (K, ECDSA.K);
      Copy_S_To_U32 (Normalize (H), ECDSA.Hash);
      Copy_S_To_U32 (Private_Key, ECDSA.PrivateKey);

      ECDSA.Order_Num_Bits := Num_Bits;
      ECDSA.Mod_Num_Bits   := Num_Bits;
--      ECDSA.A_Coeff_Sign   := 1;
--      ECDSA.A_Coeff        := 3;

      Clear_Flags;
      Enable_Pka;

      PKA.CR.MODE := ECDSA_Sign'Enum_Rep;

      PKA.CR.START := True;
      --  Need to add timeout here
      loop
         exit when PKA.SR.PROCENDF;
      end loop;

      --  sequential here vvv
      if Check_Errors then
         Result := False;
      end if;
      Clear_Flags;

      Copy_U32_To_S (ECDSA.R, Signature.R);
      Copy_U32_To_S (ECDSA.S, Signature.S);

      --  vvvvv if you don't disable here...
      --  The the Error read below can get bad data
      Disable_Pka;
      --   or vvvvv he will flip a flag indicating ram error(!)
      Err := ECDSA.Error;
      if Err /= 0 then
         Result := False;
      end if;
      return Result;
   end ECDSA_Sign;

   function ECDSA_Valid (Public_Key  : ECDSA_PublicKey;
                         Digest      : ECDSA_Hash;
                         Signature   : ECDSA_Signature) return Boolean
   is
      ECDSA : aliased ECDSA_Verify_Ram with Import, Address => S_NS_Periph (PKA_Base);
      Result : Boolean := True;
   begin
      Disable_Pka;
      Clear_Ram;
      Common_Init (For_Signing => False);
      Copy_U8_To_U32 (UInt8_Array (Public_Key.X), ECDSA.PK_X);
      Copy_U8_To_U32 (UInt8_Array (Public_Key.Y), ECDSA.PK_Y);
      Copy_U8_To_U32 (Signature.R, ECDSA.R);
      Copy_U8_To_U32 (Signature.S, ECDSA.S);
      Copy_U8_To_U32 (UInt8_Array (Normalize (Digest)), ECDSA.Hash);

      ECDSA.Order_Num_Bits := Num_Bits;
      ECDSA.Mod_Num_Bits   := Num_Bits;
--      ECDSA.A_Coeff_Sign   := 0;
--      ECDSA.A_Coeff        := 0;

      Clear_Flags;
      Enable_Pka;

      PKA.CR.MODE := ECDSA_Verification'Enum_Rep;

      PKA.CR.START := True;
      --  Need to add timeout here vvv
      loop
         exit when PKA.SR.PROCENDF;
      end loop;

      --  sequential here vvv
      if Check_Errors then
         Result := False;
      end if;
      Clear_Flags;
      --  vvvvv if you don't disable here...
      --  The the Result read below can get bad data
      Disable_Pka;
      return Result and (ECDSA.Result = 0);
   end ECDSA_Valid;


   function ECDSA_Valid (Public_Key  : ECDSA_PublicKeyStr;
                         Digest      : ECDSA_HashStr;
                         Signature   : ECDSA_SignatureStr) return Boolean
   is
      ECDSA : aliased ECDSA_Verify_Ram with Import, Address => S_NS_Periph (PKA_Base);
      Result : Boolean := True;
   begin
      Disable_Pka;
      Clear_Ram;
      Common_Init (For_Signing => False);

      Copy_S_To_U32 (Public_Key.X, ECDSA.PK_X);
      Copy_S_To_U32 (Public_Key.Y, ECDSA.PK_Y);
      Copy_S_To_U32 (Signature.R, ECDSA.R);
      Copy_S_To_U32 (Signature.S, ECDSA.S);
      Copy_S_To_U32 (Normalize (Digest), ECDSA.Hash);

      ECDSA.Order_Num_Bits := Num_Bits;
      ECDSA.Mod_Num_Bits   := Num_Bits;
--      ECDSA.A_Coeff_Sign   := 0;
--      ECDSA.A_Coeff        := 0;

      Clear_Flags;
      Enable_Pka;

      PKA.CR.MODE := ECDSA_Verification'Enum_Rep;

      PKA.CR.START := True;
      --  Need to add timeout here vvv
      loop
         exit when PKA.SR.PROCENDF;
      end loop;

      --  sequential here vvv
      if Check_Errors then
         Result := False;
      end if;
      Clear_Flags;
      --  vvvvv if you don't disable here...
      --  The the Result read below can get bad data
      Disable_Pka;
      return Result and (ECDSA.Result = 0);
   end ECDSA_Valid;

end STM32.PKA;
